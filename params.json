{"name":"Junit-java-8-runner","tagline":"a JUnit Runner that includes virtual extension methods","body":"Before Java 8, concrete methods could only exist on classes, so the default JUnit test runner doesn't look for tests on interfaces. The purpose of the Java8Runner is to find and run tests defined in virtual extension methods.\r\n\r\nThe example code below shows how to use the test runner. This example would have worked just as well using an abstract class instead of an interface. The real benefit comes from implementing two or more interfaces that both include tests. Usually you'd do this when you want to test a class that also implements two or more interfaces.\r\n\r\n```java\r\npublic interface ListTestCase\r\n{\r\n    <T> List<T> newWith(T... elements);\r\n\r\n    @Test\r\n    default void get()\r\n    {\r\n        List<Integer> list = this.newWith(1, 2, 3);\r\n        Assert.assertEquals(Integer.valueOf(1), list.get(0));\r\n        Assert.assertEquals(Integer.valueOf(2), list.get(1));\r\n        Assert.assertEquals(Integer.valueOf(3), list.get(2));\r\n    }\r\n\r\n    @Test\r\n    default void set()\r\n    {\r\n        List<Integer> list = this.newWith(1, 2, 3);\r\n        list.set(1, 4);\r\n        Assert.assertEquals(Arrays.asList(1, 4, 3), list);\r\n    }\r\n}\r\n\r\n@RunWith(Java8Runner.class)\r\npublic class ArrayListTest implements ListTestCase\r\n{\r\n    @Override\r\n    public <T> List<T> newWith(T... elements)\r\n    {\r\n        return new ArrayList<>(Arrays.asList(elements));\r\n    }\r\n}\r\n```","google":"UA-4967748-1","note":"Don't delete this file! It's used internally to help with page regeneration."}